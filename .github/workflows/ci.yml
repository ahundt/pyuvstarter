name: pyuvstarter CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  checks: write

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11", "3.12", "3.13"]
        exclude:
          # macOS runners are expensive, so only test on latest Python
          - os: macos-latest
            python-version: "3.11"
          - os: macos-latest
            python-version: "3.12"
          # Windows can be flaky with older Python
          - os: windows-latest
            python-version: "3.11"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv using official installer (Unix)
      if: runner.os != 'Windows'
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install uv using official installer (Windows)
      if: runner.os == 'Windows'
      run: |
        irm https://astral.sh/uv/install.ps1 | iex
        echo "$env:USERPROFILE\.cargo\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install pyuvstarter dependencies
      run: |
        uv venv
        uv sync

    - name: Check Python syntax
      run: |
        uv run python -m py_compile pyuvstarter.py

    - name: Build pyuvstarter package
      run: |
        # Build the package using uv
        uv build

    - name: Install pyuvstarter (editable)
      run: |
        uv pip install -e .

    - name: Install pyuvstarter as tool
      run: |
        # Install pyuvstarter as a global tool for testing
        uv tool install .

    - name: Test pyuvstarter as installed package
      run: |
        # Test that pyuvstarter can be run as an installed command
        uv run pyuvstarter --version

    - name: Test pyuvstarter in isolated environment (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "üß™ INTEGRATION TEST: Isolated environment"
        echo "========================================="
        TEST_FAILED=0
        # Create a completely separate test environment
        cd ${{ runner.temp }}
        uv venv test-env
        source test-env/bin/activate
        # Install from the built wheel using uv
        uv pip install ${{ github.workspace }}/dist/pyuvstarter-*.whl
        # Test the installed command
        echo "üîç Testing installed command:"
        pyuvstarter --version
        mkdir isolated-test
        cd isolated-test
        echo "üìÅ Running pyuvstarter in isolated directory: $(pwd)"
        pyuvstarter
        echo "üîç Verifying generated files:"
        if test -f pyproject.toml; then echo "  ‚úÖ pyproject.toml exists"; else echo "  ‚ùå pyproject.toml NOT FOUND"; ((TEST_FAILED++)); fi
        echo ""
        if [ $TEST_FAILED -eq 0 ]; then
          echo "‚úÖ Isolated environment test passed"
        else
          echo "‚ùå Isolated environment test FAILED ($TEST_FAILED checks failed)"
          exit $TEST_FAILED
        fi

    - name: Test pyuvstarter in isolated environment (Windows)
      if: runner.os == 'Windows'
      run: |
        Write-Host "üß™ INTEGRATION TEST: Isolated environment (Windows)"
        Write-Host "================================================="
        $TEST_FAILED = 0
        # Create a completely separate test environment
        cd $env:RUNNER_TEMP
        uv venv test-env
        . test-env\Scripts\activate
        # Install from the built wheel
        $wheel = Get-ChildItem "${{ github.workspace }}\dist\*.whl" | Select-Object -First 1
        uv pip install $wheel.FullName
        # Test the installed command
        Write-Host "üîç Testing installed command:"
        pyuvstarter --version
        mkdir isolated-test
        cd isolated-test
        Write-Host "üìÅ Running pyuvstarter in isolated directory: $(Get-Location)"
        pyuvstarter
        Write-Host "üîç Verifying generated files:"
        if (Test-Path "pyproject.toml") { 
          Write-Host "  ‚úÖ pyproject.toml exists" 
        } else { 
          Write-Host "  ‚ùå pyproject.toml NOT FOUND"
          $TEST_FAILED++
        }
        Write-Host ""
        if ($TEST_FAILED -eq 0) {
          Write-Host "‚úÖ Isolated environment test passed"
        } else {
          Write-Host "‚ùå Isolated environment test FAILED ($TEST_FAILED checks failed)"
          exit $TEST_FAILED
        }

    - name: Lint check with ruff (via uvx)
      # Only check for actual errors, not style issues
      # E501: line too long (we don't enforce line length)
      # E722: bare except (sometimes needed for robustness)
      # F401: imported but unused (might be used in type annotations)
      run: |
        uvx ruff check . --select=E9,F63,F7,F82 --show-files || true
        # Run full check but don't fail the build
        uvx ruff check . --exit-zero

    - name: Run unit tests (Unix)
      if: runner.os != 'Windows'
      working-directory: ${{ github.workspace }}
      run: |
        # Activate the virtual environment so pyuvstarter dependencies are available
        source .venv/bin/activate

        chmod +x create_demo.sh create_demo2.sh

        echo ""
        echo "Running create_demo2.sh unit tests..."
        echo "DEBUG: UNIT_TEST_MODE and file generation check:"
        ./create_demo2.sh --unit-test --demo-dir "${{ runner.temp }}/pyuvstarter_demo2"
        DEMO2_EXIT_CODE=$?
        
        echo "DEBUG: Checking for test_results.xml..."
        ls -la test_results* || echo "No test_results* files found"

        echo "Running create_demo.sh unit tests..."
        ./create_demo.sh --unit-test --demo-dir "${{ runner.temp }}/pyuvstarter_demo1"
        DEMO1_EXIT_CODE=$?
        # Note: create_demo.sh doesn't generate test_results.xml

        # Check if either test suite failed
        if [ $DEMO2_EXIT_CODE -ne 0 ] || [ $DEMO1_EXIT_CODE -ne 0 ]; then
          echo "‚ùå Unit tests failed"
          exit 1
        fi
        echo "‚úÖ All unit tests passed"

    - name: Publish Test Results
      if: always() && runner.os == 'Linux'
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        files: test_results.xml
        check_name: "PyUVStarter Unit Tests"
        comment_title: "PyUVStarter Test Results"
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Run unit tests (Windows)
      if: runner.os == 'Windows'
      run: |
        Write-Host "üß™ WINDOWS UNIT TEST: Basic project creation"
        Write-Host "==========================================="
        $TEST_FAILED = 0
        # Windows doesn't support the bash demo script, so run pyuvstarter directly
        uv run pyuvstarter --help
        mkdir test_windows
        cd test_windows
        Write-Host "üìÅ Created test directory: $(Get-Location)"
        Write-Host "üöÄ Running: pyuvstarter ."
        pyuvstarter .
        Write-Host ""
        Write-Host "üîç Verifying generated files:"
        if (Test-Path "pyproject.toml") { 
          Write-Host "  ‚úÖ pyproject.toml exists" 
        } else { 
          Write-Host "  ‚ùå pyproject.toml NOT FOUND"
          $TEST_FAILED++
        }
        Write-Host ""
        if ($TEST_FAILED -eq 0) {
          Write-Host "‚úÖ Windows test passed"
        } else {
          Write-Host "‚ùå Windows test FAILED ($TEST_FAILED checks failed)"
          exit $TEST_FAILED
        }

    - name: Run integration test - New project
      if: runner.os != 'Windows'
      run: |
        chmod +x tests/test_new_project.sh
        cd "$(mktemp -d)"
        ${{ github.workspace }}/tests/test_new_project.sh

    - name: Run integration test - Legacy project migration
      if: runner.os != 'Windows'
      run: |
        chmod +x tests/test_legacy_migration.sh
        cd "$(mktemp -d)"
        ${{ github.workspace }}/tests/test_legacy_migration.sh

