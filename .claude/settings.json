{
  "note": "Local settings inherit global deny rules and add specific git allows for merge",
  "permissions": {
    "allow": [
      "Bash(git remote add upstream /Users/athundt/source/pyuvstarter)",
      "Bash(git remote set-url upstream /Users/athundt/source/pyuvstarter)",
      "Bash(git remote -v)",
      "Bash(git fetch upstream main)",
      "Bash(git rebase upstream/main --strategy-option=patience)",
      "Bash(git rebase upstream/main --strategy-option=patience -i)",
      "Bash(git rebase --abort)",
      "Bash(git rebase --continue)",
      "Bash(git rebase --skip)",
      "Bash(git merge upstream/main --no-commit --strategy-option=patience)",
      "Bash(git merge --abort)",
      "Bash(git merge --continue)",
      "Bash(git diff *)",
      "Bash(git status --porcelain)",
      "Bash(git status)",
      "Bash(git log upstream/main --oneline *)",
      "Bash(git log --oneline *)",
      "Bash(git tag -l backup-before-merge-*)",
      "Bash(git tag backup-before-merge-*)",
      "Bash(BACKUP_TAG=\"backup-before-merge-$(date +%Y%m%d-%H%M%S)\"; git tag \"$BACKUP_TAG\"; echo \"Created backup tag: $BACKUP_TAG\")",
      "Bash(git stash push -m *)",
      "Bash(git stash list)",
      "Bash(git stash show *)",
      "Bash(git stash pop)",
      "Bash(git stash apply *)",
      "Bash(git rev-parse HEAD)",
      "Bash(git rev-parse *)",
      "Bash(git merge-base HEAD upstream/main)",
      "Bash(git rev-list --count HEAD ^upstream/main)",
      "Bash(git merge-tree * HEAD upstream/main)",
      "Bash(git reset --hard backup-before-merge-*)",
      "Bash(git reset HEAD *)",
      "Bash(git checkout HEAD -- *)",
      "Bash(git checkout -- *)",
      "Bash(git commit -m *)",
      "Bash(git add *)",
      "Bash(git add -A)",
      "Bash(git add .)",
      "Bash(git rm --cached *)",
      "Bash(git branch --show-current)",
      "Bash(git branch -l)",
      "Bash(git show *)",
      "Bash(git show-branch *)",
      "Bash(git config merge.tool *)",
      "Bash(git config --get merge.tool)",
      "Bash(git mergetool)",
      "Bash(git cherry-pick *)",
      "Bash(git cherry-pick --abort)",
      "Bash(git cherry-pick --continue)"
    ],
    "deny": [
      "Bash(git push *)",
      "Bash(git push --force *)",
      "Bash(git push -f *)",
      "Bash(git push --force origin master*)",
      "Bash(git push --force origin main*)",
      "Bash(git push -f origin master*)",
      "Bash(git push -f origin main*)",
      "Bash(git reset --hard origin/*)",
      "Bash(git reset --hard upstream/*)",
      "Bash(git reset --hard origin/master*)",
      "Bash(git reset --hard origin/main*)",
      "Bash(git reset --hard HEAD~*)",
      "Bash(git reset --hard HEAD^*)",
      "Bash(git reset --hard *~*)",
      "Bash(git remote rm *)",
      "Bash(git remote remove *)",
      "Bash(git tag -d *)",
      "Bash(git tag --delete *)",
      "Bash(git branch -D *)",
      "Bash(git branch --delete *)",
      "Bash(git branch --force *)",
      "Bash(git clean -fd*)",
      "Bash(git clean -f*)",
      "Bash(git clean -x*)",
      "Bash(git checkout --force *)",
      "Bash(git checkout -f *)",
      "Bash(git filter-branch *)",
      "Bash(git commit --amend *)",
      "Bash(git reflog expire *)",
      "Bash(git reflog delete *)",
      "Bash(git gc --prune=now)",
      "Bash(git gc --aggressive)",
      "Bash(git fsck --full)",
      "Bash(git prune *)",
      "Bash(git stash drop *)",
      "Bash(git stash clear)",
      "Bash(git worktree remove *)",
      "Bash(git worktree prune)",
      "Bash(git submodule deinit *)",
      "Bash(git rm -rf *)",
      "Bash(git mv * /*)",
      "Bash(git update-ref -d *)",
      "Bash(git symbolic-ref -d *)",
      "Bash(git notes remove *)"
    ]
  }
}